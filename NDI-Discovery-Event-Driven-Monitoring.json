{
  "name": "NDI Event-Driven Monitoring",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ndi-status-update",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "NDI Status Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "ndi-status-webhook-id"
    },
    {
      "parameters": {
        "jsCode": "// Process incoming webhook data from Cloudflare Worker\nconst webhookData = $json;\nconst currentTime = new Date().toISOString();\n\n// Extract the status data sent from the Worker\nconst statusData = {\n  timestamp: webhookData.timestamp || currentTime,\n  trigger_reason: webhookData.trigger_reason || 'status_update',\n  summary: webhookData.summary || {},\n  servers: webhookData.servers || {},\n  changed_servers: webhookData.changed_servers || [],\n  system_status: webhookData.system_status || 'unknown'\n};\n\nconsole.log('🔄 Received NDI status update via webhook');\nconsole.log(`📊 Summary: ${JSON.stringify(statusData.summary)}`);\nconsole.log(`🎯 Trigger reason: ${statusData.trigger_reason}`);\nconsole.log(`🔄 Changed servers: ${statusData.changed_servers.length}`);\n\n// Determine if this update requires immediate attention\nconst requiresAlert = \n  statusData.summary.offline_servers > 0 ||\n  statusData.system_status === 'degraded' ||\n  statusData.system_status === 'critical' ||\n  statusData.trigger_reason === 'server_status_change' ||\n  statusData.trigger_reason === 'system_degraded';\n\nreturn {\n  ...statusData,\n  requires_alert: requiresAlert,\n  processing_timestamp: currentTime\n};"
      },
      "id": "process-webhook-data",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "requires-alert",
              "leftValue": "={{ $json.requires_alert }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-alert-required",
      "name": "Check Alert Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Create alert from webhook status data\nconst webhookData = $json;\nconst timestamp = webhookData.timestamp;\nconst summary = webhookData.summary;\nconst servers = webhookData.servers;\nconst changedServers = webhookData.changed_servers || [];\n\n// Determine severity based on impact\nlet severity = 'LOW';\nif (summary.offline_servers > 0) severity = 'MEDIUM';\nif (summary.offline_servers > (summary.total_servers / 2)) severity = 'HIGH';\nif (webhookData.system_status === 'critical') severity = 'HIGH';\n\n// Determine alert type from trigger reason and status\nlet alertType = 'NDI_STATUS_CHANGE';\nswitch (webhookData.trigger_reason) {\n  case 'server_offline':\n    alertType = 'NDI_SERVER_OFFLINE';\n    break;\n  case 'server_online':\n    alertType = 'NDI_SERVER_RECOVERED';\n    severity = 'LOW'; // Recovery is good news\n    break;\n  case 'system_degraded':\n    alertType = 'NDI_SYSTEM_DEGRADED';\n    break;\n  case 'health_score_drop':\n    alertType = 'NDI_PERFORMANCE_DEGRADED';\n    break;\n  default:\n    alertType = 'NDI_STATUS_UPDATE';\n}\n\nconst alert = {\n  timestamp: timestamp,\n  alert_type: alertType,\n  severity: severity,\n  trigger_reason: webhookData.trigger_reason,\n  changed_servers: changedServers,\n  \n  summary: {\n    title: `🚨 NDI Alert: ${alertType.replace('NDI_', '').replace('_', ' ')}`,\n    total_servers: summary.total_servers || 0,\n    online_servers: summary.online_servers || 0,\n    offline_servers: summary.offline_servers || 0,\n    uptime_percentage: summary.uptime_percentage || 0,\n    system_status: webhookData.system_status\n  },\n  \n  affected_servers: [],\n  healthy_servers: [],\n  recently_changed: [],\n  formatted_message: ''\n};\n\n// Process server details\nfor (const [serverId, server] of Object.entries(servers)) {\n  const serverInfo = {\n    id: serverId,\n    name: server.server_name || serverId,\n    health_score: server.health_score || 0,\n    last_seen: server.last_seen || 'Unknown',\n    source_count: server.source_count || 0\n  };\n  \n  // Check if this server recently changed status\n  const recentlyChanged = changedServers.some(changed => \n    changed.server_id === serverId\n  );\n  \n  if (recentlyChanged) {\n    const changeInfo = changedServers.find(c => c.server_id === serverId);\n    serverInfo.change_type = changeInfo.change_type;\n    serverInfo.previous_status = changeInfo.previous_status;\n    serverInfo.new_status = changeInfo.new_status;\n    alert.recently_changed.push(serverInfo);\n  }\n  \n  if (server.status === 'offline' || !server.alive) {\n    alert.affected_servers.push({\n      ...serverInfo,\n      issue: server.error || 'Server offline or not responding'\n    });\n  } else {\n    alert.healthy_servers.push(serverInfo);\n  }\n}\n\n// Create formatted message\nlet message = `🚨 NDI INFRASTRUCTURE EVENT\\n\\n`;\nmessage += `Event: ${alertType}\\n`;\nmessage += `Severity: ${severity}\\n`;\nmessage += `Time: ${timestamp}\\n`;\nmessage += `Trigger: ${webhookData.trigger_reason}\\n`;\nmessage += `System Status: ${webhookData.system_status?.toUpperCase()}\\n\\n`;\n\nif (alert.recently_changed.length > 0) {\n  message += `=== RECENT CHANGES ===\\n`;\n  for (const server of alert.recently_changed) {\n    const icon = server.new_status === 'online' ? '✅' : '❌';\n    message += `${icon} ${server.name}\\n`;\n    message += `   Changed: ${server.previous_status} → ${server.new_status}\\n`;\n    message += `   Health: ${server.health_score}%\\n\\n`;\n  }\n}\n\nif (alert.affected_servers.length > 0) {\n  message += `=== AFFECTED SERVERS (${alert.affected_servers.length}) ===\\n`;\n  for (const server of alert.affected_servers) {\n    message += `❌ ${server.name}\\n`;\n    message += `   Issue: ${server.issue}\\n`;\n    message += `   Last seen: ${server.last_seen}\\n\\n`;\n  }\n}\n\nif (alert.healthy_servers.length > 0) {\n  message += `=== HEALTHY SERVERS (${alert.healthy_servers.length}) ===\\n`;\n  for (const server of alert.healthy_servers) {\n    message += `✅ ${server.name} (${server.health_score}% health)\\n`;\n  }\n}\n\nmessage += `\\n---\\nReal-time NDI Monitoring System\\n`;\nmessage += `Dashboard: https://confluence.your-domain.com/ndi-status`;\n\nalert.formatted_message = message;\n\nconsole.log(`🔥 Event-driven alert: ${alertType} (${severity})`);\nconsole.log(`📈 Changed servers: ${alert.recently_changed.length}`);\nconsole.log(`⚠️ Affected servers: ${alert.affected_servers.length}`);\n\nreturn alert;"
      },
      "id": "create-event-alert",
      "name": "Create Event Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log routine status update (no alert needed)\nconst webhookData = $json;\nconst timestamp = webhookData.timestamp;\n\nconst statusLog = {\n  timestamp: timestamp,\n  status: 'routine_update',\n  trigger_reason: webhookData.trigger_reason,\n  total_servers: webhookData.summary.total_servers || 0,\n  online_servers: webhookData.summary.online_servers || 0,\n  system_status: webhookData.system_status,\n  changed_servers: webhookData.changed_servers?.length || 0,\n  message: 'Routine NDI status update - no issues detected'\n};\n\nconsole.log('📊 Routine NDI status update received');\nconsole.log(`🔄 Trigger: ${webhookData.trigger_reason}`);\nconsole.log(`📈 Servers: ${statusLog.online_servers}/${statusLog.total_servers} online`);\nconsole.log(`🟢 System status: ${statusLog.system_status}`);\n\n// Only update Confluence for significant routine updates\nconst shouldUpdateConfluence = \n  webhookData.trigger_reason === 'periodic_summary' ||\n  statusLog.changed_servers > 0;\n\nreturn {\n  ...statusLog,\n  confluence_update: shouldUpdateConfluence\n};"
      },
      "id": "log-routine-update",
      "name": "Log Routine Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Prepare Confluence update from webhook data\nconst webhookData = $json;\nconst isAlert = webhookData.alert_type !== undefined;\nconst timestamp = webhookData.timestamp;\n\n// Use alert data if available, otherwise use routine update data\nconst summary = isAlert ? webhookData.summary : {\n  total_servers: webhookData.total_servers,\n  online_servers: webhookData.online_servers,\n  offline_servers: webhookData.total_servers - webhookData.online_servers,\n  system_status: webhookData.system_status\n};\n\nconst systemStatus = isAlert ? webhookData.system_status : webhookData.system_status;\nconst severity = isAlert ? webhookData.severity : 'NORMAL';\n\n// Create Confluence page content\nlet confluenceContent = `# NDI Infrastructure Status\\n\\n`;\nconfluenceContent += `**Last Updated:** ${timestamp}\\n`;\nconfluenceContent += `**System Status:** ${systemStatus.toUpperCase()}\\n`;\nconfluenceContent += `**Alert Level:** ${severity}\\n\\n`;\n\nif (isAlert && webhookData.recently_changed?.length > 0) {\n  confluenceContent += `## 🔄 Recent Changes\\n\\n`;\n  for (const server of webhookData.recently_changed) {\n    const icon = server.new_status === 'online' ? '✅' : '❌';\n    confluenceContent += `${icon} **${server.name}**\\n`;\n    confluenceContent += `- Status changed: ${server.previous_status} → ${server.new_status}\\n`;\n    confluenceContent += `- Health Score: ${server.health_score}%\\n\\n`;\n  }\n}\n\n// System overview table\nconfluenceContent += `## System Overview\\n\\n`;\nconfluenceContent += `| Metric | Value |\\n`;\nconfluenceContent += `|--------|--------|\\n`;\nconfluenceContent += `| Total Servers | ${summary.total_servers} |\\n`;\nconfluenceContent += `| Online Servers | ${summary.online_servers} |\\n`;\nconfluenceContent += `| Offline Servers | ${summary.offline_servers || 0} |\\n`;\nconfluenceContent += `| System Status | ${systemStatus.toUpperCase()} |\\n`;\nconfluenceContent += `| Alert Level | ${severity} |\\n`;\nconfluenceContent += `| Last Event | ${webhookData.trigger_reason || 'routine_update'} |\\n\\n`;\n\n// Add server details if available\nif (isAlert) {\n  if (webhookData.affected_servers?.length > 0) {\n    confluenceContent += `## ⚠️ Servers Requiring Attention\\n\\n`;\n    for (const server of webhookData.affected_servers) {\n      confluenceContent += `### ${server.name}\\n`;\n      confluenceContent += `- **Status:** ❌ OFFLINE\\n`;\n      confluenceContent += `- **Issue:** ${server.issue}\\n`;\n      confluenceContent += `- **Last Seen:** ${server.last_seen}\\n\\n`;\n    }\n  }\n  \n  if (webhookData.healthy_servers?.length > 0) {\n    confluenceContent += `## ✅ Healthy Servers\\n\\n`;\n    for (const server of webhookData.healthy_servers) {\n      confluenceContent += `### ${server.name}\\n`;\n      confluenceContent += `- **Status:** ✅ ONLINE\\n`;\n      confluenceContent += `- **Health Score:** ${server.health_score}%\\n`;\n      confluenceContent += `- **Active Sources:** ${server.source_count}\\n\\n`;\n    }\n  }\n}\n\n// Technical resources\nconfluenceContent += `## Technical Resources\\n\\n`;\nconfluenceContent += `- [API Documentation](https://github.com/your-org/ndi-monitoring-system)\\n`;\nconfluenceContent += `- [Deployment Guide](https://github.com/your-org/ndi-monitoring-system/blob/main/docs/deployment-guide.md)\\n`;\nconfluenceContent += `- [Troubleshooting Guide](https://github.com/your-org/ndi-monitoring-system/blob/main/docs/troubleshooting.md)\\n\\n`;\n\nconfluenceContent += `---\\n*Real-time updates via NDI Event Monitoring*`;\n\nconst confluenceUpdate = {\n  page_id: \"YOUR_CONFLUENCE_PAGE_ID\",\n  page_title: \"NDI Infrastructure Status\",\n  content: confluenceContent,\n  update_type: severity === 'HIGH' ? 'major_update' : 'minor_update',\n  version_message: `Real-time update: ${webhookData.trigger_reason || 'status_change'} at ${timestamp}`,\n  event_driven: true\n};\n\nconsole.log('📝 Prepared real-time Confluence update');\nconsole.log(`🎯 Update type: ${confluenceUpdate.update_type}`);\nconsole.log(`🔄 Trigger: ${webhookData.trigger_reason}`);\n\nreturn confluenceUpdate;"
      },
      "id": "prepare-confluence-update",
      "name": "Prepare Confluence Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "url": "https://your-instance.atlassian.net/wiki/rest/api/content/{{ $json.page_id }}",
        "method": "PUT",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "version",
              "value": "={{ $json.version + 1 }}"
            },
            {
              "name": "title",
              "value": "={{ $json.page_title }}"
            },
            {
              "name": "type",
              "value": "page"
            },
            {
              "name": "body",
              "value": "={{ { \"storage\": { \"value\": $json.content, \"representation\": \"storage\" } } }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "update-confluence-page",
      "name": "Update Confluence Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "to": "{{ $vars.ALERT_EMAIL }}",
        "subject": "🚨 NDI Real-time Alert - {{ $json.alert_type }}",
        "emailFormat": "text",
        "message": "={{ $json.formatted_message }}",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-email-alert",
      "name": "Send Email Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "url": "{{ $vars.SLACK_WEBHOOK_URL }}",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"🚨 NDI Real-time Alert\",\n  \"attachments\": [\n    {\n      \"color\": \"{{ $json.severity === 'HIGH' ? 'danger' : ($json.severity === 'MEDIUM' ? 'warning' : 'good') }}\",\n      \"fields\": [\n        {\n          \"title\": \"Event Type\",\n          \"value\": \"{{ $json.alert_type }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Severity\",\n          \"value\": \"{{ $json.severity }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Trigger\",\n          \"value\": \"{{ $json.trigger_reason }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Changed Servers\",\n          \"value\": \"{{ $json.recently_changed.length }}\",\n          \"short\": true\n        }\n      ],\n      \"text\": \"{{ $json.formatted_message }}\",\n      \"footer\": \"NDI Real-time Monitoring\",\n      \"ts\": {{ Math.floor(Date.now() / 1000) }}\n    }\n  ]\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-slack-alert",
      "name": "Send Slack Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-update-confluence",
              "leftValue": "={{ $json.confluence_update }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-confluence-update",
      "name": "Check Confluence Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 500]
    }
  ],
  "connections": {
    "NDI Status Webhook": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Check Alert Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Alert Required": {
      "main": [
        [
          {
            "node": "Create Event Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Routine Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Event Alert": {
      "main": [
        [
          {
            "node": "Prepare Confluence Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Slack Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Routine Update": {
      "main": [
        [
          {
            "node": "Check Confluence Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Confluence Update": {
      "main": [
        [
          {
            "node": "Prepare Confluence Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Confluence Update": {
      "main": [
        [
          {
            "node": "Update Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "ERROR_WORKFLOW_ID"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "ndi-event-driven",
      "name": "NDI Event Driven"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}