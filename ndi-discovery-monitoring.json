{
  "name": "NDI Monitoring - Step by Step Testing",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 1: Test Worker Connection\n\n**Keywords to Learn:**\n- HTTP Request\n- API Endpoint\n- Response Status\n- JSON Data\n\n**What This Does:**\n- Tests if your Cloudflare Worker is reachable\n- Checks if the health endpoint responds\n- Returns basic worker information\n\n**Expected Result:**\n- Status 200 (success)\n- JSON response with worker health\n\n**Next Step:**\n- If this works ‚Üí Move to Step 2\n- If this fails ‚Üí Check Worker deployment",
        "height": 220,
        "width": 300
      },
      "id": "note-step-1",
      "name": "üìù Step 1 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [460, 120]
    },
    {
      "parameters": {
        "url": "https://your-ndi-worker.your-subdomain.workers.dev/ndi/health",
        "options": {
          "timeout": 10000
        }
      },
      "id": "test-worker-health",
      "name": "üîó Test Worker Health",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "health-check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "healthy",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-worker-response",
      "name": "‚úÖ Check Worker Response",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 2: Test NDI Status Endpoint\n\n**Keywords to Learn:**\n- Authentication Headers\n- Bearer Token\n- API Authorization\n- Status Codes\n\n**What This Does:**\n- Tests the main NDI status endpoint\n- Uses authentication token\n- Gets consolidated server status\n\n**Expected Result:**\n- Status 200 with NDI data\n- OR Status 500 if no agents reporting yet\n\n**This is OK:**\n- Empty server list (no agents yet)\n- Error about no data (expected)\n\n**Next Step:**\n- Move to Step 3 regardless of data",
        "height": 240,
        "width": 300
      },
      "id": "note-step-2",
      "name": "üìù Step 2 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [900, 120]
    },
    {
      "parameters": {
        "url": "https://your-ndi-worker.your-subdomain.workers.dev/ndi/status",
        "options": {
          "timeout": 10000,
          "headers": {
            "Authorization": "Bearer YOUR_API_TOKEN_HERE"
          }
        }
      },
      "id": "test-ndi-status",
      "name": "üîó Test NDI Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 3: Test Server List Endpoint\n\n**Keywords to Learn:**\n- REST API Endpoints\n- Data Structure\n- JSON Parsing\n- API Response Format\n\n**What This Does:**\n- Gets list of registered servers\n- Shows server metadata\n- Tests different endpoint\n\n**Expected Result:**\n- Empty list initially (no agents yet)\n- JSON with servers array\n- Total count = 0\n\n**Learning Points:**\n- How APIs structure data\n- Different endpoints for different data\n\n**Next Step:**\n- Move to Step 4 (simulate data)",
        "height": 240,
        "width": 300
      },
      "id": "note-step-3",
      "name": "üìù Step 3 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1120, 120]
    },
    {
      "parameters": {
        "url": "https://your-ndi-worker.your-subdomain.workers.dev/ndi/servers",
        "options": {
          "headers": {
            "Authorization": "Bearer YOUR_API_TOKEN_HERE"
          }
        }
      },
      "id": "test-server-list",
      "name": "üîó Test Server List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 4: Create Mock Data\n\n**Keywords to Learn:**\n- JavaScript in n8n\n- Object Creation\n- Mock/Test Data\n- Data Simulation\n\n**What This Does:**\n- Creates fake NDI server data\n- Simulates what real agents would send\n- Helps test the rest of workflow\n\n**Learning Points:**\n- How to create test data\n- Understanding data structure\n- JavaScript object syntax\n\n**Expected Result:**\n- Mock JSON data for testing\n- Simulated server status\n- Fake NDI sources\n\n**Next Step:**\n- Test processing and alerts",
        "height": 240,
        "width": 300
      },
      "id": "note-step-4",
      "name": "üìù Step 4 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [460, 520]
    },
    {
      "parameters": {
        "jsCode": "// Create mock NDI server data for testing\n// This simulates what the real agents would send\n\nconst mockNDIData = {\n  timestamp: new Date().toISOString(),\n  summary: {\n    total_servers: 3,\n    servers_alive: 2,\n    servers_down: 1,\n    total_sources: 8,\n    average_health_score: 75,\n    uptime_percentage: 67\n  },\n  servers: {\n    'ndi-server-01': {\n      server_id: 'ndi-server-01',\n      server_name: 'Main Production NDI Server',\n      alive: true,\n      health_score: 85,\n      source_count: 4,\n      minutes_since_last_seen: 0.5,\n      system_info: {\n        hostname: 'ndi-prod-01',\n        cpu_count: 8,\n        memory_total_gb: 32\n      },\n      system_metrics: {\n        cpu_percent: 45,\n        memory_percent: 65,\n        disk_percent: 30\n      },\n      ndi_sources: [\n        {\n          name: 'Camera_Studio_A',\n          type: 'video',\n          url: 'ndi://ndi-prod-01/Camera_Studio_A',\n          status: 'active',\n          bandwidth_mbps: 125.5\n        },\n        {\n          name: 'Audio_Console_Main',\n          type: 'audio', \n          url: 'ndi://ndi-prod-01/Audio_Console_Main',\n          status: 'active',\n          bandwidth_mbps: 2.4\n        }\n      ]\n    },\n    'ndi-server-02': {\n      server_id: 'ndi-server-02',\n      server_name: 'Backup NDI Server',\n      alive: true,\n      health_score: 92,\n      source_count: 4,\n      minutes_since_last_seen: 1.2,\n      system_info: {\n        hostname: 'ndi-backup-01',\n        cpu_count: 4,\n        memory_total_gb: 16\n      },\n      system_metrics: {\n        cpu_percent: 25,\n        memory_percent: 40,\n        disk_percent: 20\n      },\n      ndi_sources: [\n        {\n          name: 'Camera_Studio_B',\n          type: 'video',\n          url: 'ndi://ndi-backup-01/Camera_Studio_B',\n          status: 'active',\n          bandwidth_mbps: 125.5\n        }\n      ]\n    },\n    'ndi-server-03': {\n      server_id: 'ndi-server-03',\n      server_name: 'Remote NDI Server',\n      alive: false,\n      health_score: 0,\n      source_count: 0,\n      minutes_since_last_seen: 15.5,\n      error: 'Connection timeout - server unreachable',\n      system_info: {\n        hostname: 'ndi-remote-01',\n        cpu_count: 2,\n        memory_total_gb: 8\n      }\n    }\n  },\n  system_status: 'degraded'\n};\n\nconsole.log('‚úÖ Created mock NDI data with:');\nconsole.log(`- ${mockNDIData.summary.total_servers} servers`); \nconsole.log(`- ${mockNDIData.summary.servers_alive} online, ${mockNDIData.summary.servers_down} offline`);\nconsole.log(`- ${mockNDIData.summary.total_sources} total sources`);\nconsole.log(`- System status: ${mockNDIData.system_status}`);\n\nreturn mockNDIData;"
      },
      "id": "create-mock-data",
      "name": "üé≠ Create Mock Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 700]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 5: Test Alert Logic\n\n**Keywords to Learn:**\n- Conditional Logic\n- If/Then Statements\n- Boolean Operations\n- Alert Thresholds\n\n**What This Does:**\n- Tests if alerts trigger correctly\n- Checks degraded system condition\n- Simulates real monitoring logic\n\n**Expected Result:**\n- TRUE path (alert triggered)\n- Because mock data has 1 server down\n\n**Learning Points:**\n- How to create conditions\n- Boolean logic in workflows\n- Alert threshold configuration\n\n**Next Step:**\n- Test the actual alert formatting",
        "height": 240,
        "width": 300
      },
      "id": "note-step-5",
      "name": "üìù Step 5 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [680, 520]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "servers-down-condition",
              "leftValue": "={{ $json.summary.servers_down }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "test-alert-condition",
      "name": "‚ö†Ô∏è Test Alert Condition",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 700]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 6: Format Alert Message\n\n**Keywords to Learn:**\n- String Interpolation\n- Template Literals\n- Data Formatting\n- Message Templates\n\n**What This Does:**\n- Creates formatted alert message\n- Uses data from previous steps\n- Prepares human-readable output\n\n**Expected Result:**\n- Formatted alert text\n- Shows server details\n- Ready for email/Slack\n\n**Learning Points:**\n- How to format data for humans\n- Template syntax in n8n\n- String manipulation\n\n**Testing:**\n- Check the output format\n- Verify all data appears correctly",
        "height": 240,
        "width": 300
      },
      "id": "note-step-6",
      "name": "üìù Step 6 Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [900, 520]
    },
    {
      "parameters": {
        "jsCode": "// Format alert message for testing\nconst data = $json;\n\nconst alertMessage = {\n  timestamp: new Date().toISOString(),\n  alert_type: 'NDI_SYSTEM_DEGRADED',\n  severity: data.system_status === 'critical' ? 'HIGH' : 'MEDIUM',\n  \n  summary: {\n    title: `üö® NDI Alert: ${data.summary.servers_down} Server(s) Down`,\n    description: `${data.summary.servers_down} out of ${data.summary.total_servers} NDI Discovery Servers are having issues.`,\n    uptime_percentage: data.summary.uptime_percentage,\n    total_sources_affected: data.summary.total_sources\n  },\n  \n  affected_servers: [],\n  healthy_servers: [],\n  \n  formatted_message: ''\n};\n\n// Process each server\nfor (const [serverId, server] of Object.entries(data.servers)) {\n  if (!server.alive) {\n    alertMessage.affected_servers.push({\n      id: serverId,\n      name: server.server_name,\n      issue: server.error || 'Offline',\n      last_seen: `${server.minutes_since_last_seen} minutes ago`\n    });\n  } else {\n    alertMessage.healthy_servers.push({\n      id: serverId,\n      name: server.server_name,\n      health: server.health_score,\n      sources: server.source_count\n    });\n  }\n}\n\n// Create formatted message\nlet message = `üö® NDI SYSTEM ALERT\\n\\n`;\nmessage += `Status: ${data.system_status.toUpperCase()}\\n`;\nmessage += `Time: ${alertMessage.timestamp}\\n`;\nmessage += `Uptime: ${data.summary.uptime_percentage}%\\n\\n`;\n\nmessage += `=== AFFECTED SERVERS ===\\n`;\nfor (const server of alertMessage.affected_servers) {\n  message += `‚ùå ${server.name}\\n`;\n  message += `   Issue: ${server.issue}\\n`;\n  message += `   Last seen: ${server.last_seen}\\n\\n`;\n}\n\nmessage += `=== HEALTHY SERVERS ===\\n`;\nfor (const server of alertMessage.healthy_servers) {\n  message += `‚úÖ ${server.name}\\n`;\n  message += `   Health: ${server.health}%\\n`;\n  message += `   Sources: ${server.sources}\\n\\n`;\n}\n\nalertMessage.formatted_message = message;\n\nconsole.log('üìß Generated alert message:');\nconsole.log(message);\n\nreturn alertMessage;"
      },
      "id": "format-alert-message",
      "name": "üìß Format Alert Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 700]
    },
    {
      "parameters": {
        "content": "## üéØ STEP 7: Test Complete Workflow\n\n**Keywords to Learn:**\n- End-to-End Testing\n- Workflow Validation\n- Data Pipeline\n- Integration Testing\n\n**What This Does:**\n- Shows complete workflow execution\n- Validates all steps work together\n- Demonstrates the full process\n\n**Expected Result:**\n- All steps execute successfully\n- Data flows correctly\n- Alert logic works\n\n**Success Criteria:**\n‚úÖ Worker health check passes\n‚úÖ API endpoints respond\n‚úÖ Mock data processes correctly\n‚úÖ Alert conditions trigger\n‚úÖ Message formatting works\n\n**Next Steps After Success:**\n1. Deploy actual Cloudflare Worker\n2. Set up real NDI agents\n3. Configure Confluence integration\n4. Add email/Slack notifications\n5. Schedule automatic execution",
        "height": 300,
        "width": 350
      },
      "id": "note-final",
      "name": "üìù Final Testing Notes",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1120, 520]
    },
    {
      "parameters": {
        "jsCode": "// Final validation and summary\nconst alertData = $json;\n\nconst testResults = {\n  test_run_id: Date.now(),\n  timestamp: new Date().toISOString(),\n  \n  validation: {\n    workflow_executed: true,\n    mock_data_processed: true,\n    alert_triggered: alertData.affected_servers.length > 0,\n    message_formatted: alertData.formatted_message.length > 0\n  },\n  \n  summary: {\n    total_servers_tested: 3,\n    alerts_generated: alertData.affected_servers.length,\n    healthy_servers: alertData.healthy_servers.length,\n    severity: alertData.severity\n  },\n  \n  next_steps: [\n    'Deploy Cloudflare Worker to production',\n    'Install NDI agents on actual servers', \n    'Configure real authentication tokens',\n    'Set up Confluence page integration',\n    'Add email/Slack notification endpoints',\n    'Schedule workflow for automatic execution'\n  ],\n  \n  ready_for_production: true\n};\n\nconsole.log('üéâ WORKFLOW TEST COMPLETE!');\nconsole.log('üìä Test Results:');\nconsole.log(`   - Workflow executed: ${testResults.validation.workflow_executed}`);\nconsole.log(`   - Mock data processed: ${testResults.validation.mock_data_processed}`);\nconsole.log(`   - Alert triggered: ${testResults.validation.alert_triggered}`);\nconsole.log(`   - Message formatted: ${testResults.validation.message_formatted}`);\nconsole.log('');\nconsole.log('‚ú® Ready for production deployment!');\n\nreturn testResults;"
      },
      "id": "final-validation",
      "name": "üéâ Final Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 700]
    },
    {
      "parameters": {
        "content": "## üöÄ GETTING STARTED\n\n**Before You Begin:**\n1. Update the Worker URLs in HTTP nodes\n2. Replace YOUR_API_TOKEN_HERE with real token\n3. Click 'Execute Workflow' to start testing\n\n**Step-by-Step Testing:**\n1. Run manually first\n2. Check each step's output\n3. Fix any connection issues\n4. Move to next step when ready\n\n**Common Issues:**\n- Worker not deployed yet ‚Üí Deploy first\n- Wrong URL ‚Üí Check Cloudflare dashboard\n- Auth errors ‚Üí Verify token\n- Timeout ‚Üí Check network connectivity\n\n**Learning Path:**\n- Start with Step 1 (health check)\n- Understand each keyword\n- Read the sticky notes\n- Experiment with changes\n- Build confidence step by step",
        "height": 280,
        "width": 300
      },
      "id": "note-getting-started",
      "name": "üöÄ Getting Started",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 120]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "üîó Test Worker Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Test Worker Health": {
      "main": [
        [
          {
            "node": "‚úÖ Check Worker Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Check Worker Response": {
      "main": [
        [
          {
            "node": "üîó Test NDI Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üé≠ Create Mock Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Test NDI Status": {
      "main": [
        [
          {
            "node": "üîó Test Server List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Test Server List": {
      "main": [
        [
          {
            "node": "üé≠ Create Mock Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üé≠ Create Mock Data": {
      "main": [
        [
          {
            "node": "‚ö†Ô∏è Test Alert Condition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ö†Ô∏è Test Alert Condition": {
      "main": [
        [
          {
            "node": "üìß Format Alert Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üéâ Final Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìß Format Alert Message": {
      "main": [
        [
          {
            "node": "üéâ Final Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "ndi-testing",
      "name": "NDI Testing"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}